WITH DEPT_BASE AS(
--組織基底
SELECT
        N'全行' AS DEPT_NAME,
        N'0000' AS UPDEPT_NAME,
        N'0001' AS DEPTID,
        N'0000' AS UPDEPTID
FROM DUAL
UNION ALL
SELECT
        N'總行' AS DEPT_NAME,
        N'全行' AS UPDEPT_NAME,
        N'0002' AS DEPTID,
        N'0001' AS UPDEPTID
FROM DUAL
UNION ALL
SELECT
        N'分行' AS DEPT_NAME,
        N'全行' AS UPDEPT_NAME,
        N'0003' AS DEPTID,
        N'0001' AS UPDEPTID
FROM DUAL
),DEPT_SYS AS(
--結合系統組織
SELECT
        DEPT_NAME,
        UPDEPT_NAME,
        DEPTID,
        UPDEPTID
FROM DEPT_BASE
UNION ALL
SELECT
        DEPT_NAME,
        CASE WHEN  DEPT_NAME LIKE '分行%處' THEN N'分行'
                WHEN PARENT_NODE_NAME = 'BUTTW00016' THEN N'總行'
                ELSE UPDEPT_NAME END AS UPDEPT_NAME,
        DEPTID,
        CASE WHEN  DEPT_NAME LIKE '分行%處' THEN N'0003'
                WHEN PARENT_NODE_NAME = 'BUTTW00016' THEN N'0002'
                ELSE PARENT_NODE_NAME END AS UPDEPTID
FROM "ODS_BANK"."DG_HRIS_BUDEPT"
WHERE SETID = 'BUTTW'
),DEPT_TREE AS(
--組織樹,若為全行時,須直接結合總行和分行,故使用UNION
SELECT 
        DEPTID,
        DEPT_NAME,
        UPDEPTID,
        UPDEPT_NAME,
        CONNECT_BY_ROOT(DEPT_NAME) AS FATHER_NAME,
        CONNECT_BY_ROOT(DEPTID) AS FATHER_ID
FROM DEPT_SYS
START WITH 
        CASE WHEN '${P_DEPT_LAST}' = 1 THEN DEPT_NAME
        ELSE UPDEPT_NAME END
= ${IF(P_ENTITY='全行',"'總行'","'"+P_ENTITY+"'")}
CONNECT BY PRIOR DEPTID = UPDEPTID
UNION
SELECT 
        DEPTID,
        DEPT_NAME,
        UPDEPTID,
        UPDEPT_NAME,
        CONNECT_BY_ROOT(DEPT_NAME) AS FATHER_NAME,
        CONNECT_BY_ROOT(DEPTID) AS FATHER_ID
FROM DEPT_SYS
START WITH 
        CASE WHEN '${P_DEPT_LAST}' = 1 THEN DEPT_NAME
        ELSE UPDEPT_NAME END
= ${IF(P_ENTITY='全行',"'分行'","'"+P_ENTITY+"'")}
CONNECT BY PRIOR DEPTID = UPDEPTID
),ALL_TIME AS(
--今年1月～當前月+前五年所有月份
SELECT 
        'monthly' AS CATEGORY,
        TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'mm'),-ROWNUM + 1),'yyyy-mm') AS DATA_DATE,
        ADD_MONTHS(TRUNC(SYSDATE,'mm'),-ROWNUM + 1) AS START_TIME,
        ADD_MONTHS(TRUNC(SYSDATE,'mm'),-ROWNUM + 2)-1 AS END_TIME
FROM DUAL
CONNECT BY ROWNUM <= TO_CHAR(SYSDATE,'mm') + 60
UNION ALL
--今年第1季～當前季+前五年所有季
SELECT 
        'quarterly' AS CATEGORY,
        TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'q'),-ROWNUM*3 +3),'yyyy-"Q"q') AS DATA_DATE,
        ADD_MONTHS(TRUNC(SYSDATE,'q'),-ROWNUM*3 +3) AS START_TIME,
        ADD_MONTHS(TRUNC(SYSDATE,'q'),-ROWNUM*3 +6)-1 AS END_TIME
FROM DUAL
CONNECT BY ROWNUM <= TO_CHAR(SYSDATE,'q') + 20
UNION ALL
--今年H1(+H2)+前五年中所有半年
SELECT 
        'half-yearly' AS CATEGORY,
        CONCAT(TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'yyyy'),-ROWNUM*6 +6),'yyyy-"H"'),
        TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'yyyy'),-ROWNUM*6 +12)-1,'mm')/6) AS DATA_DATE,
        ADD_MONTHS(TRUNC(SYSDATE,'yyyy'),-ROWNUM*6 +6) AS START_TIME,
        ADD_MONTHS(TRUNC(SYSDATE,'yyyy'),-ROWNUM*6 +12)-1 AS END_TIME
FROM DUAL
CONNECT BY ROWNUM <= TO_CHAR(SYSDATE,'q')/2 + 10
UNION ALL
--當前年+前五年
SELECT 
        'yearly' AS CATEGORY,
        TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'yyyy'),-ROWNUM*12 +12),'yyyy') AS DATA_DATE,
        ADD_MONTHS(TRUNC(SYSDATE,'yyyy'),-ROWNUM*12 +12) AS START_TIME,
        ADD_MONTHS(TRUNC(SYSDATE,'yyyy'),-ROWNUM*12 +24)-1 AS END_TIME
FROM DUAL
CONNECT BY ROWNUM <=  6
),FINAL_2 AS(
--若為全行時,將分行資料回寫成原來格式
SELECT
CASE WHEN '${P_ENTITY}' = '全行' AND T1.FATHER_NAME LIKE '分行%處' THEN N'分行'
ELSE T1.FATHER_NAME END AS FATHER_NAME,
T2.RISK_EXTREME AS RISK_EXTREME,
T2.RISK_HIGH AS RISK_HIGH,
T2.RISK_MEDHIGH AS RISK_MEDHIGH,
--20240108計算件數不用乘上係數
CASE WHEN T4.DEPT_GRADE='A' THEN TO_NUMBER(T2.RISK_MEDIUM)   --*0.5
        WHEN T4.DEPT_GRADE='B' THEN TO_NUMBER(T2.RISK_MEDIUM)   --*0.75
        WHEN T4.DEPT_GRADE='C' THEN TO_NUMBER(T2.RISK_MEDIUM)   --*1
        ELSE TO_NUMBER(T2.RISK_MEDIUM) END AS RISK_MEDIUM,
--
CASE WHEN T4.DEPT_GRADE='A' THEN TO_NUMBER(T2.RISK_LOW )   --*0.5
        WHEN T4.DEPT_GRADE='B' THEN TO_NUMBER(T2.RISK_LOW )   --*0.75
        WHEN T4.DEPT_GRADE='C' THEN TO_NUMBER(T2.RISK_LOW )   --*1
        ELSE TO_NUMBER(T2.RISK_LOW ) END AS RISK_LOW
FROM
DEPT_TREE T1
LEFT JOIN
"ODS_USR"."ORCD_TFBUNIT" T4
ON 1=1
AND T1.DEPTID=T4.DEPTID
LEFT JOIN "ODS_USR"."ORCD_AUDITNUM" T2
ON T1.DEPTID = T2.UNIT_CODE
AND T2.DATE_REPORT IS NOT NULL
LEFT JOIN
ALL_TIME T3
ON T2.DATE_REPORT BETWEEN T3.START_TIME AND T3.END_TIME
WHERE 1=1
AND T3.CATEGORY = '${P_TIME_UNIT}'
AND T3.DATA_DATE='${P_TIME}'
${IF(LEN(P_TIME_START)=0,"","AND T3.DATA_DATE >= '" + P_TIME_START + "'")} 
${IF(LEN(P_TIME_END)=0,"","AND T3.DATA_DATE <= '" + P_TIME_END + "'")}
), FINAL AS(
SELECT
FATHER_NAME,
SUM(RISK_EXTREME) AS 重大風險,
SUM(RISK_HIGH) AS 高風險,
SUM(RISK_MEDHIGH) AS 中高風險,
SUM(RISK_MEDIUM) AS 中風險,
SUM(RISK_LOW) AS 低風險
FROM
FINAL_2
WHERE 1=1
GROUP BY
FATHER_NAME
)
,FINAL_DEPT AS (
SELECT
*
FROM
FINAL
UNPIVOT(
NUM FOR CLASSIFY IN(低風險,中風險,中高風險,高風險,重大風險)

))
,FINAL_3 AS(
--若為全行時,將分行資料回寫成原來格式
SELECT
T2.RISK_LEVEL,
T2.RISK_TYPE
FROM
"ODS_USR"."ORCD_AUDIT" T2
LEFT JOIN
DEPT_TREE T1
ON
T1.DEPT_NAME = T2.DEPARTMENT_NAME
LEFT JOIN
ALL_TIME T3
ON
T3.CATEGORY = '${P_TIME_UNIT}'
AND T2.DATE_REPORT BETWEEN T3.START_TIME AND T3.END_TIME
WHERE 1=1
AND T3.DATA_DATE='${P_TIME}'
AND T1.FATHER_NAME IS NOT NULL
${IF(LEN(P_TIME_START)=0,"","AND T3.DATA_DATE >= '" + P_TIME_START + "'")} 
${IF(LEN(P_TIME_END)=0,"","AND T3.DATA_DATE <= '" + P_TIME_END + "'")}
), FINAL_PROCESS AS(
SELECT
RISK_TYPE AS FATHER_NAME,
--
CASE WHEN RISK_LEVEL='中高' THEN '中高風險'
        WHEN RISK_LEVEL='高' THEN '高風險'
        END AS CLASSIFY,
COUNT(RISK_LEVEL) AS NUM
FROM
FINAL_3
GROUP BY
RISK_TYPE,
RISK_LEVEL
ORDER BY
CLASSIFY ASC
)
,ROW_FINAL AS(
SELECT
ROW_NUMBER()OVER(ORDER BY SUM(NUM) DESC,FATHER_NAME ASC)AS ROW_NUM,
FATHER_NAME
FROM
${IF(P_DIM='DEPT',"FINAL_DEPT","FINAL_PROCESS")}
GROUP BY
FATHER_NAME
)
SELECT
T1.FATHER_NAME,
--
CASE WHEN T1.CLASSIFY ='低風險' THEN 1
        WHEN T1.CLASSIFY ='中風險' THEN 2
        WHEN T1.CLASSIFY = '中高風險' THEN 3
        WHEN T1.CLASSIFY = '高風險' THEN 4
        WHEN T1.CLASSIFY = '重大風險' THEN 5 END AS SORT,
T1.CLASSIFY,
T1.NUM
FROM
${IF(P_DIM='DEPT',"FINAL_DEPT","FINAL_PROCESS")} T1
LEFT JOIN
ROW_FINAL T2
ON 1=1
AND T1.FATHER_NAME = T2.FATHER_NAME
ORDER BY
T2.ROW_NUM,SORT ASC
